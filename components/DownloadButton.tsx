import React, { useState, useRef, useEffect } from 'react';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import type { DimensionsData, LabelData } from '../types';

interface DownloadButtonProps {
  labelImageBase64: string;
  dimensions: DimensionsData;
  labelInfo: LabelData;
}

/**
 * An icon component for the download button.
 * @returns {React.ReactElement} The rendered SVG icon.
 */
const DownloadIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={2} stroke="currentColor" className="w-5 h-5">
    <path strokeLinecap="round" strokeLinejoin="round" d="M3 16.5v2.25A2.25 2.25 0 0 0 5.25 21h13.5A2.25 2.25 0 0 0 21 18.75V16.5M16.5 12 12 16.5m0 0L7.5 12m4.5 4.5V3" />
  </svg>
);

/**
 * A dropdown button component that provides options to download the generated label
 * in different formats (PNG, JPG, PDF).
 * @param {DownloadButtonProps} props The props for the component.
 * @returns {React.ReactElement} The rendered download button.
 */
const DownloadButton: React.FC<DownloadButtonProps> = ({ labelImageBase64, dimensions, labelInfo }) => {
  const [isOpen, setIsOpen] = useState(false);
  const [isExporting, setIsExporting] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);

  const slugify = (text: string) => text.toLowerCase().replace(/\s+/g, '-').replace(/[^\w-]+/g, '');

  const handleHighResExport = async (format: 'png' | 'jpg') => {
    setIsExporting(true);
    setIsOpen(false);
    
    const tempImage = new Image();
    try {
        const DPI = 300;
        tempImage.src = `data:image/png;base64,${labelImageBase64}`;
        
        // Style the image to be off-screen
        tempImage.style.position = 'absolute';
        tempImage.style.left = '-9999px';
        tempImage.style.top = '-9999px';

        await new Promise((resolve, reject) => {
            tempImage.onload = resolve;
            tempImage.onerror = reject;
        });

        // Temporarily append to the body for html2canvas to find it
        document.body.appendChild(tempImage);

        const canvas = await html2canvas(tempImage, {
            scale: DPI / 96, // Assumes screen DPI is 96
            logging: false,
            useCORS: true,
            backgroundColor: null,
        });
        
        const dataUrl = canvas.toDataURL(format === 'png' ? 'image/png' : 'image/jpeg', 1.0);
        const link = document.createElement('a');
        link.href = dataUrl;
        link.download = `${slugify(labelInfo.productName)}-label-300dpi.${format}`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    } catch (error) {
        console.error('Error exporting high-res image:', error);
        alert('Failed to export high-resolution image.');
    } finally {
        // IMPORTANT: Clean up by removing the temporary image from the DOM
        if (tempImage.parentNode) {
            tempImage.parentNode.removeChild(tempImage);
        }
        setIsExporting(false);
    }
  };

  const handlePdfExport = async () => {
    setIsExporting(true);
    setIsOpen(false);
    
    try {
        const { width, height } = dimensions; // Target dimensions in inches
        const BLEED = 0.125; // inches
        const CROP_MARGIN = 0.25; // inches for crop mark space

        // Load image to get its true aspect ratio to prevent distortion
        const img = new Image();
        img.src = `data:image/png;base64,${labelImageBase64}`;
        await new Promise((resolve, reject) => {
            img.onload = resolve;
            img.onerror = (err) => reject(new Error('Failed to load label image for PDF export.'));
        });

        const imageAspectRatio = img.naturalWidth / img.naturalHeight;

        // The image generated by the AI includes bleed. We preserve its aspect ratio.
        // We use the user-provided width as the basis for the final trim size.
        const finalWidth = width;
        const bleedWidth = finalWidth + BLEED * 2;
        
        // Calculate the bleed height based on the actual image's aspect ratio.
        const bleedHeight = bleedWidth / imageAspectRatio;
        // The final height is derived from the calculated bleed height.
        const finalHeight = bleedHeight - BLEED * 2;

        const pageWidth = bleedWidth + CROP_MARGIN * 2;
        const pageHeight = bleedHeight + CROP_MARGIN * 2;
        
        const doc = new jsPDF({
            orientation: pageWidth > pageHeight ? 'landscape' : 'portrait',
            unit: 'in',
            format: [pageWidth, pageHeight],
        });

        // Add metadata to the PDF properties
        doc.setProperties({
            title: `${labelInfo.brandName} - ${labelInfo.productName} Label`,
            subject: `Print-ready label. Final dimensions: ${finalWidth.toFixed(3)}" x ${finalHeight.toFixed(3)}"`,
            author: 'AI Product Label Designer',
            creator: 'AI Product Label Designer'
        });

        // Add image with bleed, using the loaded image object
        doc.addImage(
            img,
            'PNG',
            CROP_MARGIN,
            CROP_MARGIN,
            bleedWidth,
            bleedHeight
        );

        // Add crop marks
        doc.setDrawColor(0);
        doc.setLineWidth(0.01);

        const trimBoxX1 = CROP_MARGIN + BLEED;
        const trimBoxY1 = CROP_MARGIN + BLEED;
        const trimBoxX2 = trimBoxX1 + finalWidth;
        const trimBoxY2 = trimBoxY1 + finalHeight;

        // Top-left
        doc.line(trimBoxX1, 0, trimBoxX1, CROP_MARGIN);
        doc.line(0, trimBoxY1, CROP_MARGIN, trimBoxY1);
        // Top-right
        doc.line(trimBoxX2, 0, trimBoxX2, CROP_MARGIN);
        doc.line(pageWidth, trimBoxY1, pageWidth - CROP_MARGIN, trimBoxY1);
        // Bottom-left
        doc.line(trimBoxX1, pageHeight, trimBoxX1, pageHeight - CROP_MARGIN);
        doc.line(0, trimBoxY2, CROP_MARGIN, trimBoxY2);
        // Bottom-right
        doc.line(trimBoxX2, pageHeight, trimBoxX2, pageHeight - CROP_MARGIN);
        doc.line(pageWidth, trimBoxY2, pageWidth - CROP_MARGIN, trimBoxY2);

        doc.save(`${slugify(labelInfo.productName)}-label-print-ready.pdf`);
    } catch (error) {
        console.error('Error exporting PDF:', error);
        alert(`Failed to export PDF. ${error instanceof Error ? error.message : ''}`);
    } finally {
        setIsExporting(false);
    }
  };

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);

  return (
    <div className="relative" ref={dropdownRef}>
      <button
        onClick={() => setIsOpen(!isOpen)}
        disabled={isExporting}
        title="Download Label"
        aria-label="Download Label"
        className="p-2 rounded-md bg-slate-700/50 hover:bg-slate-700 disabled:opacity-40 disabled:cursor-not-allowed transition-colors"
      >
        {isExporting ? (
          <div className="animate-spin rounded-full h-5 w-5 border-t-2 border-b-2 border-slate-100"></div>
        ) : (
          <DownloadIcon />
        )}
      </button>
      {isOpen && (
        <div className="absolute bottom-full right-0 mb-2 w-48 bg-slate-700 border border-slate-600 rounded-md shadow-lg z-10">
          <ul className="py-1">
            <li className="px-3 py-1 text-xs font-semibold text-slate-400">Export Options</li>
            <li>
              <button onClick={() => handleHighResExport('png')} className="w-full text-left px-3 py-1.5 text-sm text-slate-200 hover:bg-indigo-600">
                PNG (300 DPI)
              </button>
            </li>
            <li>
              <button onClick={() => handleHighResExport('jpg')} className="w-full text-left px-3 py-1.5 text-sm text-slate-200 hover:bg-indigo-600">
                JPG (300 DPI)
              </button>
            </li>
            <li>
              <button onClick={handlePdfExport} className="w-full text-left px-3 py-1.5 text-sm text-slate-200 hover:bg-indigo-600">
                Printable PDF
              </button>
            </li>
          </ul>
        </div>
      )}
    </div>
  );
};

export default DownloadButton;